In Java, strings are represented by the `java.lang.String` class, which provides various methods for manipulating and working with strings. Here's a list of commonly used string methods in Java:

1. **Creation and Initialization**:
   - `String str = "Hello, World!";`: Initializes a string.
   - `String str = new String(charArray);`: Creates a string from an array of characters.
   - `String str = new String(byteArray, charset);`: Creates a string from an array of bytes using a specific character encoding.

2. **Length and Character Access**:
   - `int length = str.length();`: Returns the length of the string.
   - `char charAt(int index)`: Returns the character at a specific index (0-based).

3. **Concatenation and Combining**:
   - `String concatStr = str1.concat(str2);`: Concatenates two strings.
   - `String combinedStr = str1 + str2;`: Concatenates strings using the `+` operator.
   
4. **Comparison**:
   - `boolean equals(Object obj)`: Compares the string with another object for equality.
   - `boolean equalsIgnoreCase(String anotherString)`: Compares the string, ignoring case.
   - `int compareTo(String anotherString)`: Compares the string lexicographically.
   - `boolean startsWith(String prefix)`: Checks if the string starts with the specified prefix.
   - `boolean endsWith(String suffix)`: Checks if the string ends with the specified suffix.
   
5. **Search and Location**:
   - `int indexOf(String substring)`: Returns the index of the first occurrence of a substring.
   - `int lastIndexOf(String substring)`: Returns the index of the last occurrence of a substring.
   - `boolean contains(CharSequence sequence)`: Checks if the string contains a specified sequence.
   - `int indexOf(String substring, int fromIndex)`: Searches for a substring starting from a specified index.

6. **Substring Extraction**:
   - `String substring(int beginIndex)`: Returns a substring from a starting index.
   - `String substring(int beginIndex, int endIndex)`: Returns a substring within a specified range.

7. **Trimming and Whitespace Removal**:
   - `String trim()`: Removes leading and trailing whitespaces from the string.

8. **Replacement**:
   - `String replace(char oldChar, char newChar)`: Replaces all occurrences of 'oldChar' with 'newChar'.
   - `String replace(CharSequence target, CharSequence replacement)`: Replaces all occurrences of 'target' with 'replacement'.
   - `String replaceAll(String regex, String replacement)`: Replaces substrings matching a regular expression.
   - `String replaceFirst(String regex, String replacement)`: Replaces the first substring matching a regular expression.

9. **Case Conversion**:
   - `String toLowerCase()`: Converts the string to lowercase.
   - `String toUpperCase()`: Converts the string to uppercase.

10. **Splitting**:
    - `String[] parts = str.split(delimiter)`: Splits the string into an array of substrings based on the delimiter.
    - `String[] parts = str.split(delimiter, limit)`: Splits the string into a limited number of substrings.

11. **Checking and Testing**:
    - `boolean isEmpty()`: Checks if the string is empty.
    - `boolean isBlank()` (Java 11+): Checks if the string is empty or contains only white spaces.

12. **Formatting** (e.g., for internationalization and localization):
    - `String format(String format, Object... args)`: Formats a string using placeholders.

13. **String Building**:
    - `StringBuilder` and `StringBuffer` classes: These classes provide efficient ways to construct and modify strings dynamically.

These are some of the most commonly used methods for working with strings in Java. The Java `String` class is immutable, meaning most
 string methods return a new string rather than modifying the original string in place. If you need to perform many string operations,
  consider using `StringBuilder` or `StringBuffer` for better performance due to their mutability.