Java Collections Framework :-

*The Java collections framework provides a set of interfaces and classes to implement various data structures and algorithms.
example:-the LinkedList class of the collections framework provides the implementation of the doubly-linked list data structure.

Collections Framework
1.Collection a.List
	     b.Set
	     c.Queue
2.Map
3.Iterator

Java Collection Interface:-

*The Collection interface is the root interface of the collections framework hierarchy.

Java does not provide direct implementations of the Collection interface but provides implementations of its subinterfaces like List, Set, and Queue


Collections Framework Vs. Collection Interface :-

People often get confused between the collections framework and Collection Interface.

The Collection interface is the root interface of the collections framework. The framework includes other interfaces as well: Map and Iterator. These interfaces may also have subinterfaces.

Subinterfaces of the Collection Interface:-

*As mentioned earlier, the Collection interface includes subinterfaces that are implemented by Java classes.
*All the methods of the Collection interface are also present in its subinterfaces.
*Here are the subinterfaces of the Collection Interface:

A.List Interface:-
*.The List interface is an ordered collection that allows us to add and remove elements like an array.
*.In Java, the List interface is an ordered collection that allows us to store and access elements sequentially. It extends the Collection interface.
Classes that Implement List:-
Since List is an interface, we cannot create objects from it.

In order to use functionalities of the List interface, we can use these classes:
Below Classes implements the list interface.
ArrayList
LinkedList
Vector
Stack

How to use List?

In Java, we must import java.util.List package in order to use List.

// ArrayList implementation of List
List<String> list1 = new ArrayList<>();

// LinkedList implementation of List
List<String> list2 = new LinkedList<>();

Methods of List:-
1.The List interface includes all the methods of the Collection interface. Its because Collection is a super interface of List.
2.Some of the commonly used methods of the Collection interface that's also available in the List interface are:

add() 	    - 	adds an element to a list
addAll()    - 	adds all elements of one list to another
get()       - 	helps to randomly access elements from lists
iterator()  - 	returns iterator object that can be used to sequentially access elements of lists
set()       - 	changes elements of lists
remove()    - 	removes an element from the list
removeAll() - 	removes all the elements from the list
clear()     - 	removes all the elements from the list (more efficient than removeAll())
size()      - 	returns the length of lists
toArray()   - 	converts a list into an array
contains()  - 	returns true if a list contains specified element

ArrayList :- 
In Java, we use the ArrayList class to implement the functionality of resizable-arrays.

It implements the List interface of the collections framework.

Unlike arrays, arraylists can automatically adjust their capacity when we add or remove elements from them. Hence, arraylists are also known as dynamic arrays.

Creating an ArrayList:-
ArrayList<Type> arrayList= new ArrayList<>();

Here, Type indicates the type of an arraylist. For example,

// create Integer type arraylist
ArrayList<Integer> arrayList = new ArrayList<>();

// create String type arraylist
ArrayList<String> arrayList = new ArrayList<>();

In the above program, we have used Integer not int. It is because we cannot use primitive types while creating an arraylist. Instead, we have to use the corresponding wrapper classes.


















































































































ArrayList :-
1.ArrayList provides constant time for search operation, so it is 
better to use ArrayList if searching is more frequent operation than 
add and remove operation.
2.